#!/usr/bin/env python

import rospy
import actionlib
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from tf.transformations import quaternion_from_euler

def send_goal(x, y, yaw=0.0, timeout=30.0):
    goal = MoveBaseGoal()
    goal.target_pose.header.frame_id = "map"
    goal.target_pose.header.stamp = rospy.Time.now()

    goal.target_pose.pose.position.x = x
    goal.target_pose.pose.position.y = y
    goal.target_pose.pose.position.z = 0.0

    qx, qy, qz, qw = quaternion_from_euler(0.0, 0.0, yaw)
    goal.target_pose.pose.orientation.x = qx
    goal.target_pose.pose.orientation.y = qy
    goal.target_pose.pose.orientation.z = qz
    goal.target_pose.pose.orientation.w = qw

    rospy.loginfo("Sending goal: x=%.2f, y=%.2f, yaw=%.2f", x, y, yaw)
    client.send_goal(goal)

    finished = client.wait_for_result(rospy.Duration(timeout))

    if not finished:
        client.cancel_goal()
        rospy.logwarn("Timeout: Failed to reach (%.2f, %.2f) in %.1f seconds", x, y, timeout)
        return False
    elif client.get_state() != actionlib.GoalStatus.SUCCEEDED:
        rospy.logwarn("Move_base reported failure at (%.2f, %.2f)", x, y)
        return False
    else:
        return True

if __name__ == '__main__':
    rospy.init_node('waypoint_navigation')

    client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
    rospy.loginfo("Waiting for move_base action server...")
    client.wait_for_server()
    rospy.loginfo("Connected to move_base action server.")

    waypoint_map = {
        9: [0.086, 0.041, 0.0],       # middle
        8: [1.251, 0.086, 0.0],       # kieran
        7: [1.053, 1.670, 0.0],       # hazwan
        6: [-0.251, 1.628, 0.0],      # yong jie
        5: [-1.825, 1.787, 0.0],      # jarvis
        4: [-1.817, -0.031, 0.0],     # daryl
        3: [-1.532, -1.394, 0.0],     # yong zhou
        2: [-0.109, -1.242, 0.0],     # joshua
        1: [1.296, -1.314, 0.0],      # rahim
    }

    try:
        user_input = raw_input("Enter up to 9 waypoint numbers (1-9) separated by spaces: ")
        selections = [int(x) for x in user_input.strip().split() if int(x) in waypoint_map]
    except Exception as e:
        rospy.logerr("Invalid input. Please enter numbers 1 to 9 only.")
        exit(1)

    for i, wp_id in enumerate(selections):
        coords = waypoint_map[wp_id]
        success = send_goal(coords[0], coords[1], coords[2], timeout=300.0)
        if success:
            rospy.loginfo("Reached waypoint %d (%d): (%.2f, %.2f)", i+1, wp_id, coords[0], coords[1])
        else:
            rospy.logwarn("Skipping waypoint %d (%d): (%.2f, %.2f)", i+1, wp_id, coords[0], coords[1])
